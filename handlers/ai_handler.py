"""
Handler cho AI Assistant
"""

import os
from telegram import Update
from telegram.ext import ContextTypes
from config import GEMINI_API_KEY, OPENAI_API_KEY


async def handle_ai_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω c√¢u h·ªèi AI"""
    question = update.message.text
    
    # N·∫øu kh√¥ng c√≥ API key, s·ª≠ d·ª•ng rule-based responses
    if not GEMINI_API_KEY and not OPENAI_API_KEY:
        response = await get_rule_based_response(question)
    else:
        # S·ª≠ d·ª•ng AI API
        try:
            if GEMINI_API_KEY:
                response = await get_gemini_response(question)
            elif OPENAI_API_KEY:
                response = await get_openai_response(question)
            else:
                response = await get_rule_based_response(question)
        except Exception as e:
            print(f"AI Error: {e}")
            response = await get_rule_based_response(question)
    
    await update.message.reply_text(response, parse_mode='Markdown')


async def get_rule_based_response(question: str) -> str:
    """Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi d·ª±a tr√™n keywords (fallback khi kh√¥ng c√≥ AI API)"""
    question_lower = question.lower()
    
    # C# .NET keywords
    if any(kw in question_lower for kw in ['async', 'await', 'async/await']):
        return """
üîπ *Async/Await trong C#:*

‚úÖ Async/await gi√∫p code ch·∫°y b·∫•t ƒë·ªìng b·ªô m√† kh√¥ng block thread.

```csharp
public async Task<string> GetDataAsync() {
    // Method n√†y s·∫Ω ch·∫°y async
    var response = await httpClient.GetAsync(url);
    var content = await response.Content.ReadAsStringAsync();
    return content;
}
```

üìå *Key Points:*
‚Ä¢ async keyword l√†m method return Task ho·∫∑c Task<T>
‚Ä¢ await ch·ªù async operation ho√†n th√†nh
‚Ä¢ Kh√¥ng block UI thread
‚Ä¢ Gi√∫p tƒÉng hi·ªáu su·∫•t ·ª©ng d·ª•ng
"""
    
    elif any(kw in question_lower for kw in ['linq', 'lambda', 'query']):
        return """
üîπ *LINQ trong C#:*

‚úÖ Language Integrated Query - truy v·∫•n d·ªØ li·ªáu tr·ª±c ti·∫øp trong C#.

```csharp
var numbers = new[] {1, 2, 3, 4, 5, 6};

// Query syntax
var evens = from n in numbers 
           where n % 2 == 0 
           select n;

// Method syntax (th∆∞·ªùng d√πng h∆°n)
var evens = numbers.Where(n => n % 2 == 0);

// More examples
var sum = numbers.Sum();
var max = numbers.Max();
var avg = numbers.Average();
var grouped = numbers.GroupBy(n => n % 2);
```

üìå *Common Methods:*
‚Ä¢ Where(), Select(), OrderBy()
‚Ä¢ First(), Any(), All()
‚Ä¢ Sum(), Max(), Min(), Average()
"""
    
    elif any(kw in question_lower for kw in ['react', 'hooks']):
        return """
üîπ *React Hooks:*

‚úÖ Hooks cho ph√©p d√πng state v√† features kh√°c trong function components.

```javascript
import { useState, useEffect } from 'react';

function MyComponent() {
    // useState - state management
    const [count, setCount] = useState(0);
    
    // useEffect - side effects
    useEffect(() => {
        document.title = `Count: ${count}`;
        return () => {
            // Cleanup function
        };
    }, [count]); // Dependencies
    
    return (
        <button onClick={() => setCount(count + 1)}>
            Count: {count}
        </button>
    );
}
```

üìå *Common Hooks:*
‚Ä¢ useState - state
‚Ä¢ useEffect - side effects
‚Ä¢ useContext - context API
‚Ä¢ useMemo, useCallback - performance
"""
    
    elif any(kw in question_lower for kw in ['javascript', 'js', 'es6']):
        return """
üîπ *JavaScript ES6+:*

‚úÖ C√°c t√≠nh nƒÉng m·ªõi t·ª´ ES6 tr·ªü ƒëi:

```javascript
// Arrow Functions
const add = (a, b) => a + b;

// Destructuring
const [first, second] = array;
const {name, age} = user;

// Spread Operator
const newArr = [...arr1, ...arr2];
const newObj = {...obj1, ...obj2};

// Template Literals
const message = `Hello ${name}, you are ${age}`;

// Modules
export const myFunction = () => {};
import { myFunction } from './module';

// Promises & Async/Await
const getData = async () => {
    const response = await fetch(url);
    return await response.json();
};
```
"""
    
    elif any(kw in question_lower for kw in ['typescript', 'ts']):
        return """
üîπ *TypeScript Basics:*

‚úÖ TypeScript = JavaScript + Static Types

```typescript
// Type annotations
let name: string = "John";
let age: number = 25;
let isActive: boolean = true;

// Interfaces
interface User {
    name: string;
    age: number;
    email?: string; // Optional
}

// Type inference
const user: User = {
    name: "John",
    age: 25
};

// Generics
function identity<T>(arg: T): T {
    return arg;
}

// Classes with types
class Person {
    constructor(public name: string, public age: number) {}
}
```

üìå *Benefits:*
‚Ä¢ Type safety
‚Ä¢ Better IDE support
‚Ä¢ Compile-time error checking
"""
    
    elif any(kw in question_lower for kw in ['closure', 'scoping']):
        return """
üîπ *JavaScript Closures:*

‚úÖ Closure = Function c√≥ th·ªÉ truy c·∫≠p bi·∫øn t·ª´ scope ngo√†i

```javascript
function outerFunction() {
    const outerVariable = 'I am outside!';
    
    function innerFunction() {
        console.log(outerVariable); // Access outer scope
    }
    
    return innerFunction;
}

const myFunc = outerFunction();
myFunc(); // "I am outside!"

// Practical example
function createCounter() {
    let count = 0;
    return function() {
        return ++count; // Access to count
    };
}

const counter = createCounter();
console.log(counter()); // 1
console.log(counter()); // 2
```

üìå *Use Cases:*
‚Ä¢ Data privacy / Encapsulation
‚Ä¢ Function factories
‚Ä¢ Module pattern
"""
    
    elif any(kw in question_lower for kw in ['promise', 'async']):
        return """
üîπ *Promises & Async/Await:*

```javascript
// Promise
const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('Success!');
        // or reject('Error');
    }, 1000);
});

promise
    .then(result => console.log(result))
    .catch(error => console.log(error));

// Async/Await (modern way)
async function fetchData() {
    try {
        const response = await fetch(url);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error(error);
    }
}

// Parallel requests
async function fetchMultiple() {
    const [data1, data2] = await Promise.all([
        fetch(url1),
        fetch(url2)
    ]);
}
```
"""
    
    else:
        return """
ü§ñ *AI Assistant:*

üí° T√¥i l√† tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh cho C#, .NET, JavaScript, TypeScript, React!

‚ùì *B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:*
‚Ä¢ C√∫ ph√°p v√† c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng
‚Ä¢ Best practices v√† patterns
‚Ä¢ Debugging v√† troubleshooting
‚Ä¢ So s√°nh gi·ªØa c√°c c√¥ng ngh·ªá
‚Ä¢ H∆∞·ªõng d·∫´n luy·ªán t·∫≠p LeetCode

üìù *Tip:* H·ªèi c·ª• th·ªÉ h∆°n ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi chi ti·∫øt!

V√≠ d·ª•:
‚Ä¢ "Gi·∫£i th√≠ch async/await trong C#"
‚Ä¢ "S·ª± kh√°c bi·ªát gi·ªØa useState v√† useReducer"
‚Ä¢ "C√°ch implement debounce function"
"""
    
    return response


async def get_gemini_response(question: str) -> str:
    """S·ª≠ d·ª•ng Google Gemini API"""
    try:
        import google.generativeai as genai
        
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-pro')
        
        prompt = f"""
B·∫°n l√† tr·ª£ l√Ω h·ªçc l·∫≠p tr√¨nh chuy√™n nghi·ªáp.
Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ C#, .NET, JavaScript, TypeScript, React, LeetCode.

C√¢u h·ªèi: {question}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, c√≥ code examples, format markdown.
"""
        
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        print(f"Gemini error: {e}")
        return await get_rule_based_response(question)


async def get_openai_response(question: str) -> str:
    """S·ª≠ d·ª•ng OpenAI GPT API"""
    try:
        from openai import OpenAI
        
        client = OpenAI(api_key=OPENAI_API_KEY)
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful coding tutor for C#, .NET, JavaScript, TypeScript, React, and LeetCode."},
                {"role": "user", "content": question}
            ],
            max_tokens=500
        )
        
        return response.choices[0].message.content
    except Exception as e:
        print(f"OpenAI error: {e}")
        return await get_rule_based_response(question)
