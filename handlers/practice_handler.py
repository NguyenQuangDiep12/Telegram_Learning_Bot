"""
Handler cho th·ª±c h√†nh v√† LeetCode
"""

import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes


# Danh s√°ch b√†i t·∫≠p LeetCode theo ch·ªß ƒë·ªÅ
LEETCODE_PROBLEMS = {
    'arrays': [
        {
            'title': 'Two Sum',
            'difficulty': 'Easy',
            'description': 'T√¨m hai s·ªë trong array c√≥ t·ªïng b·∫±ng target',
            'example': 'Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]',
            'hint': 'S·ª≠ d·ª•ng HashMap ƒë·ªÉ l∆∞u s·ªë ƒë√£ duy·ªát'
        },
        {
            'title': 'Best Time to Buy and Sell Stock',
            'difficulty': 'Easy',
            'description': 'T√¨m l·ª£i nhu·∫≠n t·ªëi ƒëa khi mua b√°n c·ªï phi·∫øu',
            'example': 'Input: prices = [7,1,5,3,6,4]\nOutput: 5',
            'hint': 'Theo d√µi gi√° nh·ªè nh·∫•t v√† l·ª£i nhu·∫≠n l·ªõn nh·∫•t'
        },
        {
            'title': 'Three Sum',
            'difficulty': 'Medium',
            'description': 'T√¨m ba s·ªë c√≥ t·ªïng b·∫±ng 0',
            'example': 'Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]',
            'hint': 'S·∫Øp x·∫øp v√† s·ª≠ d·ª•ng two pointers'
        }
    ],
    'strings': [
        {
            'title': 'Valid Anagram',
            'difficulty': 'Easy',
            'description': 'Ki·ªÉm tra hai chu·ªói c√≥ ph·∫£i anagram',
            'example': 'Input: s = "anagram", t = "nagaram"\nOutput: true',
            'hint': 'S·∫Øp x·∫øp ho·∫∑c ƒë·∫øm k√Ω t·ª±'
        },
        {
            'title': 'Longest Substring Without Repeating Characters',
            'difficulty': 'Medium',
            'description': 'T√¨m ƒë·ªô d√†i chu·ªói con kh√¥ng l·∫∑p',
            'example': 'Input: s = "abcabcbb"\nOutput: 3',
            'hint': 'Sliding window v·ªõi Set'
        }
    ],
    'dynamic_programming': [
        {
            'title': 'Climbing Stairs',
            'difficulty': 'Easy',
            'description': 'T√≠nh s·ªë c√°ch leo c·∫ßu thang n b·∫≠c',
            'example': 'Input: n = 3\nOutput: 3',
            'hint': 'dp[i] = dp[i-1] + dp[i-2]'
        },
        {
            'title': 'Coin Change',
            'difficulty': 'Medium',
            'description': 'T√¨m s·ªë ti·ªÅn xu nh·ªè nh·∫•t ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c amount',
            'example': 'Input: coins = [1,2,5], amount = 11\nOutput: 3',
            'hint': 'DP v·ªõi dp[i] = min(dp[i], dp[i-coin]+1)'
        },
        {
            'title': 'Longest Common Subsequence',
            'difficulty': 'Medium',
            'description': 'T√¨m ƒë·ªô d√†i chu·ªói con chung d√†i nh·∫•t',
            'example': 'Input: text1 = "abcde", text2 = "ace"\nOutput: 3',
            'hint': 'dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]+1 if match)'
        }
    ],
    'binary_search': [
        {
            'title': 'Binary Search',
            'difficulty': 'Easy',
            'description': 'T√¨m target trong sorted array',
            'example': 'Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4',
            'hint': 'left = 0, right = len-1, while left <= right'
        },
        {
            'title': 'Search in Rotated Sorted Array',
            'difficulty': 'Medium',
            'description': 'T√¨m target trong rotated sorted array',
            'example': 'Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4',
            'hint': 'So s√°nh nums[mid] v·ªõi nums[left] ƒë·ªÉ t√¨m pivot'
        }
    ],
    'trees': [
        {
            'title': 'Maximum Depth of Binary Tree',
            'difficulty': 'Easy',
            'description': 'T√¨m ƒë·ªô s√¢u l·ªõn nh·∫•t c·ªßa binary tree',
            'example': 'Input: root = [3,9,20,null,null,15,7]\nOutput: 3',
            'hint': 'DFS: return 1 + max(dfs(left), dfs(right))'
        },
        {
            'title': 'Validate Binary Search Tree',
            'difficulty': 'Medium',
            'description': 'Ki·ªÉm tra BST c√≥ h·ª£p l·ªá',
            'example': 'Input: root = [2,1,3]\nOutput: true',
            'hint': 'So s√°nh v·ªõi min v√† max boundary'
        }
    ]
}


async def handle_practice_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Hi·ªÉn th·ªã menu th·ª±c h√†nh"""
    practice_keyboard = [
        [KeyboardButton('Arrays & Strings'), KeyboardButton('Dynamic Programming')],
        [KeyboardButton('Binary Search'), KeyboardButton('Trees & Graphs')],
        [KeyboardButton('Practice C#'), KeyboardButton('Practice JavaScript')],
        [KeyboardButton('üîô V·ªÅ Menu Ch√≠nh')]
    ]
    
    await update.message.reply_text(
        "üíª *MENU TH·ª∞C H√ÄNH*\n\n"
        "Ch·ªçn ch·ªß ƒë·ªÅ b·∫°n mu·ªën luy·ªán t·∫≠p:\n\n"
        "‚Ä¢ Arrays & Strings\n"
        "‚Ä¢ Dynamic Programming\n"
        "‚Ä¢ Binary Search\n"
        "‚Ä¢ Trees & Graphs\n"
        "‚Ä¢ Practice C#/JavaScript",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup(practice_keyboard, resize_keyboard=True)
    )
    
    context.user_data['awaiting_practice'] = True


async def handle_leetcode_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω y√™u c·∫ßu b√†i t·∫≠p LeetCode"""
    text = update.message.text
    
    category_map = {
        'Arrays & Strings': 'arrays',
        'Dynamic Programming': 'dynamic_programming',
        'Binary Search': 'binary_search',
        'Trees & Graphs': 'trees'
    }
    
    if text in category_map:
        category = category_map[text]
        problems = LEETCODE_PROBLEMS.get(category, [])
        
        if problems:
            # Ch·ªçn b√†i t·∫≠p ng·∫´u nhi√™n
            problem = random.choice(problems)
            
            response = f"""
üíª *B√†i T·∫≠p: {problem['title']}*

üìä *ƒê·ªô Kh√≥:* {problem['difficulty']}

üìù *M√¥ T·∫£:*
{problem['description']}

üìå *V√≠ D·ª•:*
```
{problem['example']}
```

üí° *G·ª£i √ù:*
{problem['hint']}

üîó Th·ª≠ solve t·∫°i: leetcode.com
"""
            
            # Keyboard ƒë·ªÉ request another
            practice_keyboard = [
                [KeyboardButton('üîÅ B√†i T·∫≠p Kh√°c'), KeyboardButton('üîô V·ªÅ Menu Ch√≠nh')]
            ]
            
            await update.message.reply_text(
                response,
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(practice_keyboard, resize_keyboard=True)
            )
        else:
            await update.message.reply_text("‚ùå Ch∆∞a c√≥ b√†i t·∫≠p cho ch·ªß ƒë·ªÅ n√†y!")
    
    elif text == 'üîÅ B√†i T·∫≠p Kh√°c':
        await handle_practice_menu(update, context)
    
    elif text in ['Practice C#', 'Practice JavaScript']:
        language = text.replace('Practice ', '')
        practice_code = get_practice_code(language)
        
        keyboard = [
            [KeyboardButton('üíª Y√™u C·∫ßu B√†i T·∫≠p Kh√°c'), KeyboardButton('üîô V·ªÅ Menu Ch√≠nh')]
        ]
        
        await update.message.reply_text(
            practice_code,
            parse_mode='Markdown',
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )


def get_practice_code(language: str) -> str:
    """Tr·∫£ v·ªÅ b√†i t·∫≠p code theo ng√¥n ng·ªØ"""
    if language == 'C#':
        return """
üíª *B√†i T·∫≠p C# - Th·ª±c H√†nh*

üî∏ *B√†i 1: Implement LINQ Where*
```csharp
public static IEnumerable<T> MyWhere<T>(
    this IEnumerable<T> source, 
    Func<T, bool> predicate) {
    // Your code here
}
```

üî∏ *B√†i 2: Async File Reader*
```csharp
public async Task<string> ReadFileAsync(string path) {
    // Read file asynchronously
}
```

üî∏ *B√†i 3: Generic Repository Pattern*
```csharp
public interface IRepository<T> where T : class {
    Task<IEnumerable<T>> GetAllAsync();
    Task<T> GetByIdAsync(int id);
    Task<T> AddAsync(T entity);
}
```

üí° Vi·∫øt implementation cho c√°c b√†i tr√™n!
"""
    else:  # JavaScript
        return """
üíª *B√†i T·∫≠p JavaScript - Th·ª±c H√†nh*

üî∏ *B√†i 1: Implement Array Methods*
```javascript
Array.prototype.myMap = function(callback) {
    // Your implementation
}

Array.prototype.myFilter = function(callback) {
    // Your implementation
}
```

üî∏ *B√†i 2: Async Data Fetching*
```javascript
async function fetchMultiple(urls) {
    // Fetch multiple URLs concurrently
    // Return results in order
}
```

üî∏ *B√†i 3: Debounce Function*
```javascript
function debounce(func, delay) {
    // Return debounced version of func
}
```

üí° Implement c√°c function tr√™n!
"""
